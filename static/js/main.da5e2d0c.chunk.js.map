{"version":3,"sources":["components/quote.js","App.js","reportWebVitals.js","index.js"],"names":["getRandomQuote","randomIndex","Math","floor","random","quoteList","length","Quotes","quote","color","solid","class","style","id","author","colors","App","props","getRandomColor","handleClick","newColor","setState","state","bind","this","backgroundColor","href","target","onClick","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAKMA,EAAiB,WACnB,IAAIC,EAAcC,KAAKC,MAAMD,KAAKE,SAAWC,EAAUC,QACvD,OAAOD,EAAUJ,IAGfM,EAAS,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MACrB,OACI,gCACA,cAAC,IAAD,CAAaC,OAAK,EAACC,MAAM,aAAaC,MAAO,CAACH,MAAOA,KACrD,oBAAII,GAAG,OAAOF,MAAM,aAAaC,MAAO,CAACH,MAAOA,GAAhD,SAAyDD,EAAMA,QAC/D,oBAAGK,GAAG,SAASF,MAAM,aAAaC,MAAO,CAACH,MAAOA,GAAjD,eAA4DD,EAAMM,cCTtEC,G,MAAS,CACX,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YA6DaC,E,kDA1Db,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IAQNC,eAAiB,WACf,OAAOH,EAAOb,KAAKC,MAAMD,KAAKE,SAAWW,EAAOT,UAVlC,EAalBa,YAAc,WAEZ,IAAIC,EADJ,EAAKC,SAAS,CAACb,MAAOR,MAEtB,GACEoB,EAAW,EAAKF,uBACTE,IAAa,EAAKE,MAAMb,OACjC,EAAKY,SAAS,CAACZ,MAAOW,KAjBtB,EAAKE,MAAQ,CACXd,MAAO,GACPC,MAAO,QAET,EAAKS,eAAiB,EAAKA,eAAeK,KAApB,gBANN,E,gEAmCdC,KAAKH,SAAS,CAACb,MAAOR,MACtBwB,KAAKH,SAAS,CAACZ,MAAOe,KAAKN,qB,+BAI7B,OACE,mCACA,qBAAKP,MAAM,YAAYC,MAAO,CAAEa,gBAAiBD,KAAKF,MAAMb,OAA5D,SACE,sBAAKE,MAAM,YAAYE,GAAG,YAA1B,UACE,cAAC,EAAD,CAAQL,MAAOgB,KAAKF,MAAMd,MAAOC,MAAOe,KAAKF,MAAMb,QACnD,sBAAKE,MAAM,UAAX,UACA,mBAAGA,MAAM,GAAGE,GAAG,cAAca,KAAK,2BAA2BC,OAAO,SAApE,SACA,cAAC,IAAD,CAAWjB,OAAK,EAACC,MAAM,SAASE,GAAG,aAAaD,MAAO,CAACH,MAAOe,KAAKF,MAAMb,WAE1E,wBAAQE,MAAM,SAASE,GAAG,YAAYe,QAASJ,KAAKL,YAAaP,MAAO,CAACa,gBAAiBD,KAAKF,MAAMb,OAArG,qC,GAlDQoB,aCRHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.da5e2d0c.chunk.js","sourcesContent":["import React from 'react';\nimport quoteList from './quoteList.json';\nimport { FaQuoteLeft } from 'react-icons/fa';\n\n\nconst getRandomQuote = () => {\n    let randomIndex = Math.floor(Math.random() * quoteList.length)\n    return quoteList[randomIndex]\n}\n\nconst Quotes = ({ quote, color }) => {\n    return (\n        <div>\n        <FaQuoteLeft solid class=\"quote-icon\" style={{color: color}}/>\n        <h1 id=\"text\" class=\"quote-text\" style={{color: color}}>{quote.quote}</h1>\n        <p id=\"author\" class=\"quote-text\" style={{color: color}}>- {quote.author}</p>\n        </div>\n    )\n};\n\nexport {Quotes, getRandomQuote};","import React, {Component} from 'react';\nimport {Quotes, getRandomQuote} from './components/quote';\nimport './App.css';\nimport { FaTwitter } from 'react-icons/fa';\n\n\nvar colors = [\n  '#16a085',\n  '#27ae60',\n  '#2c3e50',\n  '#f39c12',\n  '#e74c3c',\n  '#9b59b6',\n  '#FB6964',\n  '#342224',\n  '#472E32',\n  '#BDBB99',\n  '#77B1A9',\n  '#73A857'\n];\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      quote: {},\n      color: '#333'\n    };\n    this.getRandomColor = this.getRandomColor.bind(this);\n  }\n\n    getRandomColor = () => {\n      return colors[Math.floor(Math.random() * colors.length)]\n  }\n\n  handleClick = () => {\n    this.setState({quote: getRandomQuote()});\n    let newColor;\n    do {\n      newColor = this.getRandomColor();\n    } while (newColor === this.state.color)\n    this.setState({color: newColor});\n  };\n\n  \n\n    componentDidMount() {\n      // using an API call to they say so for new quote every\n    //   fetch('https://quotes.rest/qod?language=en')\n    //   .then(res => res.json())\n    //   .then((data) => {\n    //     this.setState({quote: data.contents.quotes[0]})\n    //     console.log(data.contents.quotes[0].quote)\n    //   })\n    //   .catch(console.log)\n\n      // this is to use a local set of quotes for the freecodecamp challenge\n      this.setState({quote: getRandomQuote()})\n      this.setState({color: this.getRandomColor()});\n    }\n   \n  render () {\n    return (\n      <>\n      <div class=\"container\" style={{ backgroundColor: this.state.color }}>\n        <div class=\"quote-box\" id=\"quote-box\">\n          <Quotes quote={this.state.quote} color={this.state.color}/>\n          <div class=\"buttons\">\n          <a class=\"\" id=\"tweet-quote\" href=\"twitter.com/intent/tweet\" target=\"_blank\">\n          <FaTwitter solid class=\"button\" id=\"tweet-icon\" style={{color: this.state.color}}/>\n          </a>\n          <button class=\"button\" id=\"new-quote\" onClick={this.handleClick} style={{backgroundColor: this.state.color}}>New Quote</button>\n        </div>\n        </div>\n      </div>\n    </>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}